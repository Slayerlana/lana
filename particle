<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        margin: 0;
        overflow: hidden;
      }

      canvas {
        display: block;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>

    <script>
      const canvas = document.getElementById('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      class Particle {
        constructor(x, y, size, color, speedX, speedY, hue, saturation) {
          this.x = x;
          this.y = y;
          this.size = size;
          this.color = color;
          this.speedX = speedX;
          this.speedY = speedY;
          this.originalSpeedX = speedX;
          this.originalSpeedY = speedY;
          this.angle = Math.random() * (2 * Math.PI);
          this.hue = hue;
          this.saturation = saturation;
          this.isYellow = false;
        }

        update() {
          const cx = canvas.width / 2;
          const cy = canvas.height / 2;
          const rx = 450;
          const ry = 150;
          const speed = 0.001 + Math.sqrt(this.speedX ** 2 + this.speedY ** 2) * 0.001;

          this.x = cx + rx * Math.cos(this.angle);
          this.y = cy + ry * Math.sin(this.angle * 2);

          this.angle += speed;
          this.angle = this.angle % (2 * Math.PI);
        }

        draw() {
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);

          if (this.isYellow) {
            ctx.fillStyle = 'yellow';
          } else {
            ctx.fillStyle = this.color;
          }

          ctx.fill();
        }

        enlargeSize(targetSize, duration) {
          const initialSize = this.size;
          const sizeIncrement = (targetSize - initialSize) / (duration * 60);
          const initialLightness = parseInt(this.color.slice(-3, -1));
          const lightnessDecrement = initialLightness / (duration * 60);

          let currentSize = initialSize;
          let currentLightness = initialLightness;
          let elapsedTime = 0;

          return new Promise((resolve) => {
            const sizeAnimation = setInterval(() => {
              currentSize += sizeIncrement;
              currentLightness -= lightnessDecrement;
              this.size = currentSize;
              this.color = this.color.replace(/(\d{1,3})%/, `${currentLightness}%`);
              elapsedTime += 1000 / 60;

              if (elapsedTime >= duration * 1000) {
                clearInterval(sizeAnimation);
                resolve();
              }
            }, 1000 / 60);
          });
        }
      }

      const particles = [];

      function createParticles() {
        const particleCount = 500;

        for (let i = 0; i < particleCount; i++) {
          const x = Math.random() * canvas.width;
          const y = Math.random() * canvas.height;
          const size = Math.random() * (15 - 5) + 5;
          const color = `hsl(${Math.random() * 360}, ${Math.random() * 100}%, ${Math.random() * 100}%)`;
          const speedX = Math.random() * 2 - 1;
          const speedY = Math.random() * 2 - 1;
          const hue = Math.random() * 360;
          const saturation = Math.random() * 100;

          particles.push(new Particle(x, y, size, color, speedX, speedY, hue, saturation));
        }
      }

      function checkYellowParticle(x, y) {
        for (let i = 0; i < particles.length; i++) {
          const particle = particles[i];
          const dx = x - particle.x;
          const dy = y - particle.y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance <= particle.size) {
            particle.isYellow = true;
            particle.enlargeSize(particle.size + 20, 0.5).then(() => {
              particle.isYellow = false;
            });
            break;
          }
        }
      }

      function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < particles.length; i++) {
          const particle = particles[i];
          particle.update();
          particle.draw();
        }

        requestAnimationFrame(animate);
      }

      canvas.addEventListener('click', (event) => {
        const x = event.clientX;
        const y = event.clientY;

        checkYellowParticle(x, y);
      });

      createParticles();
      animate();
    </script>
  </body>
</html>
